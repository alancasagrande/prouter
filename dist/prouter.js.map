{"version":3,"file":"prouter.js","sourceRoot":"/source/","sources":["prouter.ts"],"names":["prouter","prouter.RouteHelper","prouter.RouteHelper.constructor","prouter.RouteHelper._escapeString","prouter.RouteHelper._escapeGroup","prouter.RouteHelper._clearSlashes","prouter.RouteHelper._flags","prouter.RouteHelper._parse","prouter.RouteHelper._tokensToPathExp","prouter.RouteHelper.parseSearchString","prouter.RouteHelper.parsePath","prouter.RouteHelper.extractRequest","prouter.RouteHelper.stringToPathExp","prouter.RoutingLevel","prouter.RoutingLevel.constructor","prouter.RoutingLevel.config","prouter.RoutingLevel.add","prouter.RoutingLevel.remove","prouter.RoutingLevel.check","prouter.RoutingLevel.drop","prouter.RoutingLevel.to","prouter.Router","prouter.Router.constructor","prouter.Router.drop","prouter.Router._listen","prouter.Router.check","prouter.Router.navigate","prouter.Router.route","prouter.Router.config","prouter.Router.to","prouter.Router.add","prouter.Router.remove","prouter.Router.getCurrent","prouter.Router.on","prouter.Router.off","prouter.Router.trigger","prouter.Router._applyNested","prouter.Router._apply"],"mappings":"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Y,EAAEA,CAACA,CAACA,MAAMA,CAACA,cAAcA,CAACA,GAAGA,CAACA,KAAKA,SAASA,CAACA,CAACA,CAACA;gBAC3CA,MAAMA,CAACA,cAAcA,CAACA,GAAGA,CAACA,GAAGA,EAAEA,CAACA;YACpCA,CAACA;YACDA,MAAMA,CAACA,cAAcA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;YAC1CA,MAAMA,CAACA,MAAMA,CAACA;QAClBA,CAACA;QAEDZ;;;;;WAKGA;QACIA,UAAGA,GAAVA,UAAWA,GAAYA,EAAEA,QAAmBA;YACxCa,EAAEA,CAACA,CAACA,GAAGA,KAAKA,SAASA,CAACA,CAACA,CAACA;gBACpBA,MAAMA,CAACA,cAAcA,GAAGA,EAAEA,CAACA;YAC/BA,CAACA;YAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,MAAMA,CAACA,cAAcA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACpCA,EAAEA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA;oBACXA,IAAMA,SAASA,GAAGA,MAAMA,CAACA,cAAcA,CAACA,GAAGA,CAACA,CAACA;oBAC7CA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,SAASA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;wBACxCA,EAAEA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA,KAAKA,QAAQA,CAACA,CAACA,CAACA;4BAC5BA,SAASA,CAACA,MAAMA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;wBAC3BA,CAACA;oBACLA,CAACA;oBACDA,EAAEA,CAACA,CAACA,SAASA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;wBACzBA,OAAOA,MAAMA,CAACA,cAAcA,CAACA,GAAGA,CAACA,CAACA;oBACtCA,CAACA;gBACLA,CAACA;gBAACA,IAAIA,CAACA,CAACA;oBACJA,OAAOA,MAAMA,CAACA,cAAcA,CAACA,GAAGA,CAACA,CAACA;gBACtCA,CAACA;YACLA,CAACA;YACDA,MAAMA,CAACA,MAAMA,CAACA;QAClBA,CAACA;QAEDb;;;;WAIGA;QACIA,cAAOA,GAAdA,UAAeA,GAAWA;YAAEc,oBAAoBA;iBAApBA,WAAoBA,CAApBA,sBAAoBA,CAApBA,IAAoBA;gBAApBA,mCAAoBA;;YAC5CA,IAAMA,SAASA,GAAGA,MAAMA,CAACA,cAAcA,CAACA,GAAGA,CAACA,CAACA;YAC7CA,EAAEA,CAACA,CAACA,CAACA,SAASA,IAAIA,CAACA,SAASA,CAACA,MAAMA,CAACA,CAACA,CAACA;gBAClCA,MAAMA,CAACA,IAAIA,CAACA;YAChBA,CAACA;YACDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,SAASA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBACxCA,IAAMA,MAAMA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA;gBACpDA,8CAA8CA;gBAC9CA,EAAEA,CAACA,CAACA,MAAMA,KAAKA,KAAKA,CAACA,CAACA,CAACA;oBACnBA,MAAMA,CAACA,KAAKA,CAACA;gBACjBA,CAACA;YACLA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QAEcd,mBAAYA,GAA3BA,UAA4BA,UAAuBA;YAC/Ce,MAAMA,CAACA,UAASA,KAAUA;gBACtB,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAC5B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACxB,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;oBACzC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBAC9B,CAAC;YACL,CAAC,CAACA;QACNA,CAACA;QAEcf,aAAMA,GAArBA,UAAsBA,UAAuBA;YACzCgB,IAAIA,aAAsBA,CAACA;YAC3BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,UAAUA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBACzCA,IAAMA,SAASA,GAAGA,UAAUA,CAACA,CAACA,CAACA,CAACA;gBAChCA,EAAEA,CAACA,CAACA,SAASA,CAACA,aAAaA,CAACA,CAACA,CAACA;oBAC1BA,aAAaA,GAAGA,SAASA,CAACA,QAAQA,CAACA,IAAIA,CAACA,IAAIA,EAAEA,SAASA,CAACA,MAAMA,CAACA,CAACA;gBACpEA,CAACA;gBACDA,MAAMA,CAACA,YAAYA,CAACA,SAASA,CAACA,MAAMA,CAACA,CAACA,aAAaA,CAACA,CAACA;YACzDA,CAACA;QACLA,CAACA;QAtLchB,aAAMA,GAAGA,IAAIA,YAAYA,EAAEA,CAACA;QAC5BA,qBAAcA,GAAiBA,EAAEA,CAACA;QAClCA,eAAQA,GAAGA,EAAEA,CAACA;QACdA,iBAAUA,GAAGA,KAAKA,CAACA;QAoLtCA,aAACA;IAADA,CAACA,AAzLDrB,IAyLCA;IAzLYA,cAAMA,SAyLlBA,CAAAA;IAGDA,MAAMA,CAACA,OAAOA,EAAEA,CAACA;AAErBA,CAACA,EAlpBM,OAAO,KAAP,OAAO,QAkpBb","sourcesContent":["module prouter {\r\n\r\n    export interface PathExp extends RegExp {\r\n        keys?: PathExpToken[];\r\n    }\r\n\r\n    /**\r\n     * Contract for entry handler.\r\n     */\r\n    export interface Route {\r\n        path: PathExp;\r\n        callback: Function;\r\n        alias: string;\r\n        facade?: RoutingLevel;\r\n    }\r\n    \r\n    /**\r\n     * Contract for entry handler.\r\n     */\r\n    export interface NodeRoute {\r\n        alias: string;\r\n        callback: Function;\r\n        params: Request;\r\n        routes: NodeRoute[];\r\n        rootRerouting: boolean;\r\n    }\r\n\r\n    /**\r\n     * Contract for entry handler.\r\n     */\r\n    export interface Options {\r\n        mode?: string;\r\n        root?: string;\r\n        rerouting?: boolean;\r\n    }\r\n    \r\n    export interface ParsedPath {\r\n        path: string;\r\n        query: Object;\r\n        queryString: string;\r\n    }\r\n\r\n    /**\r\n     * Contract for object param.\r\n     */\r\n    export interface Request extends ParsedPath {\r\n        params?: Object;\r\n    }\r\n\r\n    export interface PathExpToken {\r\n        name: string;\r\n        prefix: string;\r\n        delimiter: string;\r\n        optional: boolean;\r\n        repeat: boolean;\r\n        pattern: string;\r\n    }\r\n\r\n    /**\r\n     * Contract for event handler.\r\n     */\r\n    interface EventHandler {\r\n        [index: string]: Function[];\r\n    }\r\n\r\n\r\n    declare const global: any;\r\n\r\n    // Establish the root object, `window` (`self`) in the browser, or `global` on the server.\r\n    // We use `self` instead of `window` for `WebWorker` support.\r\n    const _global = (typeof self === 'object' && self.self === self && self) ||\r\n        (typeof global === 'object' && global.global === global && global);\r\n\r\n    const _MODES = ['node', 'hash', 'history'];\r\n    const _DEF_OPTIONS: Options = { mode: 'hash', root: '/', rerouting: true };\r\n\r\n\r\n    /**\r\n     * The main path matching regexp utility.\r\n     * @type {RegExp} path regexp.\r\n     */\r\n    const PATH_STRIPPER = new RegExp([\r\n    // Match escaped characters that would otherwise appear in future matches.\r\n    // This allows the user to escape special characters that won't transform.\r\n        '(\\\\\\\\.)',\r\n    // Match Express-style parameters and un-named parameters with a prefix\r\n    // and optional suffixes. Matches appear as:\r\n    //\r\n    // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\r\n    // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\r\n    // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\r\n        '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^()])+)\\\\))([+*?])?|(\\\\*))'\r\n    ].join('|'), 'g');\r\n\r\n    // Cached regex for stripping a leading hash/slash and trailing space.\r\n    const ROUTE_STRIPPER = /^[#\\/]|\\s+$/g;\r\n\r\n    // Cached regex for stripping urls of hash.\r\n    const HASH_STRIPPER = /#.*$/;\r\n\r\n\r\n    class RouteHelper {             \r\n\r\n        /**\r\n         * Escape a regular expression string.\r\n         * @param  {String} str the string to scape\r\n         * @return {String} the escaped string\r\n         */\r\n        private static _escapeString(str: string): string {\r\n            return str.replace(/([.+*?=^!:${}()[\\]|\\/])/g, '\\\\$1');\r\n        }\r\n\r\n        /**\r\n         * Escape the capturing group by escaping special characters and meaning.\r\n         * @param  {String} group the group to escape\r\n         * @return {String} escaped group.\r\n         */\r\n        private static _escapeGroup(group: string): string {\r\n            return group.replace(/([=!:$\\/()])/g, '\\\\$1');\r\n        }\r\n\r\n        static _clearSlashes(path: string): string {\r\n            return path.replace(/\\/$/, '').replace(/^\\//, '');\r\n        }\r\n\r\n        /**\r\n         * Get the flags for a regexp from the options.\r\n         * @param  {Object} opts the options object for building the flags.\r\n         * @return {String} flags.\r\n         */\r\n        private static _flags(opts: Object): string {\r\n            return opts['sensitive'] ? '' : 'i';\r\n        }        \r\n        \r\n        /**\r\n         * Parse a string for the raw tokens.\r\n         * @param  {String} str\r\n         * @return {Array} tokens.\r\n         */\r\n        private static _parse(str: string): any[] {\r\n\r\n            const tokens: any[] = [];\r\n            let key = 0;\r\n            let index = 0;\r\n            let path = '';\r\n            let res: RegExpExecArray;\r\n\r\n            while ((res = PATH_STRIPPER.exec(str))) {\r\n\r\n                const m = res[0];\r\n                const escaped = res[1];\r\n                const offset = res.index;\r\n\r\n                path += str.slice(index, offset);\r\n                index = offset + m.length;\r\n\r\n                // Ignore already escaped sequences.\r\n                if (escaped) {\r\n                    path += escaped[1];\r\n                    continue;\r\n                }\r\n\r\n                // Push the current path onto the tokens.\r\n                if (path) {\r\n                    tokens.push(path);\r\n                    path = '';\r\n                }\r\n\r\n                const prefix = res[2];\r\n                const name = res[3];\r\n                const capture = res[4];\r\n                const group = res[5];\r\n                const suffix = res[6];\r\n                const asterisk = res[7];\r\n\r\n                const repeat = suffix === '+' || suffix === '*';\r\n                const optional = suffix === '?' || suffix === '*';\r\n                const delimiter = prefix || '/';\r\n                const pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?');\r\n\r\n                tokens.push({\r\n                    name: name || (key++).toString(),\r\n                    prefix: prefix || '',\r\n                    delimiter: delimiter,\r\n                    optional: optional,\r\n                    repeat: repeat,\r\n                    pattern: RouteHelper._escapeGroup(pattern)\r\n                });\r\n            }\r\n\r\n            // Match any characters still remaining.\r\n            if (index < str.length) {\r\n                path += str.substr(index);\r\n            }\r\n\r\n            // If the path exists, push it onto the end.\r\n            if (path) {\r\n                tokens.push(path);\r\n            }\r\n\r\n            return tokens;\r\n        }\r\n\r\n        /**\r\n         * Expose a function for taking tokens and returning a RegExp.\r\n         * @param  {Array}  tokens\r\n         * @param  {Object} options\r\n         * @return {RegExp} the regexp.\r\n         */\r\n        private static _tokensToPathExp(tokens: string[], options: Object = {}): PathExp {\r\n\r\n            const strict = options['strict'];\r\n            const end = options['end'] !== false;\r\n            let route = '';\r\n            const lastToken = tokens[tokens.length - 1];\r\n            const endsWithSlash = typeof lastToken === 'string' && lastToken.length && lastToken.charAt(lastToken.length - 1) === '/';\r\n\r\n            // Iterate over the tokens and create our regexp string.\r\n            for (let i = 0; i < tokens.length; i++) {\r\n\r\n                const token: any = tokens[i];\r\n\r\n                if (typeof token === 'string') {\r\n                    route += RouteHelper._escapeString(token);\r\n                } else {\r\n\r\n                    const prefix = RouteHelper._escapeString(token.prefix);\r\n                    let capture = token.pattern;\r\n\r\n                    if (token.repeat) {\r\n                        capture += '(?:' + prefix + capture + ')*';\r\n                    }\r\n\r\n                    if (token.optional) {\r\n                        if (prefix) {\r\n                            capture = '(?:' + prefix + '(' + capture + '))?';\r\n                        } else {\r\n                            capture = '(' + capture + ')?';\r\n                        }\r\n                    } else {\r\n                        capture = prefix + '(' + capture + ')';\r\n                    }\r\n\r\n                    route += capture;\r\n                }\r\n            }\r\n\r\n            // In non-strict mode we allow a slash at the end of match. If the path to\r\n            // match already ends with a slash, we remove it for consistency. The slash\r\n            // is valid at the end of a path match, not in the middle. This is important\r\n            // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\r\n            if (!strict) {\r\n                route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\\\/(?=$))?';\r\n            }\r\n\r\n            if (end) {\r\n                route += '$';\r\n            } else {\r\n                // In non-ending mode, we need the capturing groups to match as much as\r\n                // possible by using a positive lookahead to the end or next path segment.\r\n                route += strict && endsWithSlash ? '' : '(?=\\\\/|$)';\r\n            }\r\n\r\n            return new RegExp('^' + route, RouteHelper._flags(options));\r\n        }\r\n        \r\n        static parseSearchString(search: string): Object {\r\n            const searchParams = {};\r\n            if (search.charAt(0) === '?') {\r\n                search = search.slice(1);                    \r\n            }\r\n            const paramsArr = search.split('&');\r\n            for (let i = 0; i < paramsArr.length; i++) {\r\n                const pair = paramsArr[i].split('=');\r\n                searchParams[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n            }\r\n            return searchParams;\r\n        }\r\n        \r\n        static parsePath(path: string): ParsedPath {\r\n            \r\n            path = RouteHelper._clearSlashes(path);\r\n            \r\n            let parser: any;\r\n            \r\n            if (typeof _global.URL === 'function') {\r\n                parser = new _global.URL(path, 'http://example.com');\r\n            } else {\r\n                parser = document.createElement('a');\r\n                parser.href = 'http://example.com/' + path;\r\n            }                                   \r\n            \r\n            return {               \r\n                path: parser.pathname,\r\n                query: RouteHelper.parseSearchString(parser.search),\r\n                queryString: parser.search                \r\n            };\r\n        }           \r\n        \r\n        /**\r\n         * Given a route, and a path that it matches, return the object of\r\n         * extracted decoded parameters.\r\n         * @param {string} path The uri's path part.\r\n         * @param {PathExp} route The alias         \r\n         * @returns {NavigationParams} the extracted parameters\r\n         * @private\r\n         */\r\n        static extractRequest(path: string, pathExp: PathExp): Request {\r\n            \r\n            const request: Request = RouteHelper.parsePath(path);   \r\n            request.params = {};        \r\n\r\n            const result = pathExp.exec(request.path);\r\n\r\n            if (!result) {\r\n                return request;\r\n            }\r\n\r\n            const args = result.slice(1);\r\n            const keys = pathExp.keys;                        \r\n\r\n            for (let i = 0; i < args.length; i++) {\r\n                request.params[keys[i].name] = _global.decodeURIComponent(args[i]);\r\n            }\r\n\r\n            return request;\r\n        }\r\n\r\n        /**\r\n         * Create a path regexp from string input.\r\n         * @param  {String} path\r\n         * @param  {Object} options\r\n         * @return {RegExp} the regexp\r\n         */\r\n        static stringToPathExp(path: string, options?: Object): PathExp {\r\n\r\n            const tokens = RouteHelper._parse(path);\r\n\r\n            const pathExp = RouteHelper._tokensToPathExp(tokens, options);  \r\n            \r\n            const keys: PathExpToken[] = [];                     \r\n\r\n            // Attach keys back to the regexp.\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (typeof tokens[i] !== 'string') {\r\n                    keys.push(tokens[i]);\r\n                }\r\n            }\r\n\r\n            pathExp.keys = keys;\r\n\r\n            return pathExp;\r\n        }                                     \r\n    }\r\n\r\n\r\n    export class RoutingLevel {\r\n\r\n        _routes: Route[] = [];\r\n        _options: Options = {};\r\n\r\n        constructor(_options: Options = {}) {\r\n            this.config(_options);\r\n        }\r\n\r\n        config(options: Options): RoutingLevel {\r\n            for (let prop in _DEF_OPTIONS) {\r\n                if (options[prop] !== undefined) {\r\n                    this._options[prop] = options[prop];\r\n                } else if (this._options[prop] === undefined) {\r\n                    this._options[prop] = _DEF_OPTIONS[prop];\r\n                }\r\n            }\r\n            return this;\r\n        }\r\n\r\n        add(path: any, callback?: Function): RoutingLevel {\r\n\r\n            let re: PathExp;\r\n\r\n            // If default route.\r\n            if (typeof path === 'function') {\r\n                callback = path;\r\n                re = /.*/;\r\n            } else {\r\n                re = RouteHelper.stringToPathExp(path);\r\n            }\r\n\r\n            this._routes.push({\r\n                path: re,\r\n                callback: callback,\r\n                alias: path\r\n            });\r\n\r\n            return this;\r\n        }\r\n\r\n        remove(alias: any): RoutingLevel {\r\n\r\n            for (let i = this._routes.length - 1; i >= 0; i--) {\r\n                const r = this._routes[i];\r\n                if (alias === r.alias || alias === r.callback || alias === r.path) {\r\n                    this._routes.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        check(fragment: string, nodeRoutes: NodeRoute[], lastURL: string): NodeRoute[] {\r\n\r\n            for (let i = 0; i < this._routes.length; i++) {\r\n\r\n                const route = this._routes[i];\r\n                const match = fragment.match(route.path);\r\n\r\n                if (match) {\r\n\r\n                    const params = RouteHelper.extractRequest(fragment, route.path);\r\n                    const shouldReroute = (fragment.slice(0, match[0].length) !== lastURL.slice(0, match[0].length));\r\n\r\n                    const nodeRoute: NodeRoute = {\r\n                        alias: route.alias,\r\n                        callback: route.callback,\r\n                        params: params,\r\n                        routes: [],\r\n                        rootRerouting: this._options.rerouting || shouldReroute\r\n                    };\r\n\r\n                    nodeRoutes.push(nodeRoute);\r\n\r\n                    if (route.facade) {\r\n                        fragment = fragment.slice(match[0].length, fragment.length);\r\n                        lastURL = lastURL.slice(match[0].length, lastURL.length);\r\n                        route.facade.check(fragment, nodeRoute.routes, lastURL);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return nodeRoutes;\r\n        }\r\n\r\n        drop(): RoutingLevel {\r\n            this._routes = [];\r\n            this.config(_DEF_OPTIONS);\r\n            return this;\r\n        }\r\n\r\n        to(alias: string): RoutingLevel {\r\n            let subrouter: RoutingLevel;\r\n            for (let i = 0; i < this._routes.length; i++) {\r\n                const route = this._routes[i];\r\n                if (alias === route.alias) {\r\n                    subrouter = route.facade;\r\n                    if (!subrouter) {\r\n                        subrouter = new RoutingLevel(this._options);\r\n                        route.facade = subrouter;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            return subrouter;\r\n        }\r\n    }\r\n\r\n\r\n    export class Router {\r\n\r\n        private static facade = new RoutingLevel();\r\n        private static _eventHandlers: EventHandler = {};\r\n        private static _lastURL = '';\r\n        private static _listening = false;\r\n\r\n        static drop(): RoutingLevel {\r\n            Router._lastURL = '';\r\n            Router.off();\r\n            return Router.facade.drop();\r\n        }\r\n\r\n        static _listen() {\r\n            if (Router._listening) {\r\n                throw new Error('Prouter already listening');\r\n            }\r\n            _global.addEventListener('hashchange', () => {\r\n                const current = Router.getCurrent();\r\n                Router.check(current);\r\n            }, false);\r\n            _global.addEventListener('popstate', (evt: PopStateEvent) => {\r\n                if (evt.state !== null && evt.state !== undefined) {\r\n                    const current = Router.getCurrent();\r\n                    Router.check(current);\r\n                }\r\n            }, false);\r\n            Router._listening = true;\r\n        }\r\n\r\n        static check(path: string): RoutingLevel {\r\n            const nodeRoutes = Router.facade.check(path, [], Router._lastURL);\r\n            Router._apply(nodeRoutes);\r\n            return Router.facade;\r\n        }\r\n\r\n        static navigate(path: string): RoutingLevel {\r\n            const mode = Router.facade._options.mode;\r\n            switch (mode) {\r\n                case 'history':\r\n                    _global.history.pushState(null, null, Router.facade._options.root + RouteHelper._clearSlashes(path));\r\n                    break;\r\n                case 'hash':\r\n                    _global.location.href = _global.location.href.replace(/#(.*)$/, '') + '#' + path;\r\n                    break;\r\n                case 'node':\r\n                    Router._lastURL = path;\r\n                    break;\r\n            }\r\n            return Router.facade;\r\n        }\r\n\r\n        static route(path: string): boolean {            \r\n            const current = Router.getCurrent();\r\n            const next = Router.trigger('route:before', path, current);\r\n            console.log('route current', current);\r\n            if (next === false) {\r\n                return false;\r\n            }            \r\n            Router.check(path);\r\n            Router.navigate(path);            \r\n            Router.trigger('route:after', path, current);\r\n            console.log('route path', path);\r\n            return true;\r\n        }\r\n\r\n        static config(options: Options): RoutingLevel {\r\n            return Router.facade.config(options);\r\n        }\r\n\r\n        static to(alias: string): RoutingLevel {\r\n            return Router.facade.to(alias);\r\n        }\r\n\r\n        static add(path: any, callback?: Function): RoutingLevel {\r\n            return Router.facade.add(path, callback);\r\n        }\r\n\r\n        static remove(alias: string): RoutingLevel {\r\n            return Router.facade.remove(alias);\r\n        }\r\n\r\n        static getCurrent(): string {\r\n\r\n            const mode = Router.facade._options.mode;\r\n            const root = Router.facade._options.root;\r\n            let fragment: string;\r\n\r\n            if (mode === 'history') {\r\n                fragment = RouteHelper._clearSlashes(_global.decodeURI(_global.location.pathname + _global.location.search));\r\n                fragment = fragment.replace(/\\?(.*)$/, '');\r\n                fragment = root !== '/' ? fragment.replace(root, '') : fragment;\r\n                fragment = RouteHelper._clearSlashes(fragment);\r\n            } else if (mode === 'hash') {\r\n                const match = _global.location.href.match(/#(.*)$/);\r\n                fragment = match ? match[1] : '';\r\n                fragment = RouteHelper._clearSlashes(fragment);\r\n            } else {\r\n                fragment = Router._lastURL;\r\n            }\r\n\r\n            return fragment;\r\n        }\r\n    \r\n        /**\r\n         * Add event listener.\r\n         * @param {string} evt Name of the event.\r\n         * @param {Function} callback Method.\r\n         * @returns {History} this history\r\n         */\r\n        static on(evt: string, callback: Function): Router {\r\n            if (Router._eventHandlers[evt] === undefined) {\r\n                Router._eventHandlers[evt] = [];\r\n            }\r\n            Router._eventHandlers[evt].push(callback);\r\n            return Router;\r\n        }\r\n\r\n        /**\r\n         * Remove event listener.\r\n         * @param {string} evt Name of the event.\r\n         * @param {Function} callback Method.\r\n         * @returns {History} this history\r\n         */\r\n        static off(evt?: string, callback?: Function): Router {\r\n            if (evt === undefined) {\r\n                Router._eventHandlers = {};\r\n            } else if (Router._eventHandlers[evt]) {\r\n                if (callback) {\r\n                    const callbacks = Router._eventHandlers[evt];\r\n                    for (let i = 0; i < callbacks.length; i++) {\r\n                        if (callbacks[i] === callback) {\r\n                            callbacks.splice(i, 1);\r\n                        }\r\n                    }\r\n                    if (callbacks.length === 0) {\r\n                        delete Router._eventHandlers[evt];\r\n                    }\r\n                } else {\r\n                    delete Router._eventHandlers[evt];\r\n                }\r\n            }\r\n            return Router;\r\n        }\r\n    \r\n        /**\r\n         * Events triggering.\r\n         * @param {string} evt Name of the event being triggered.\r\n         * @return {boolean} null if not suscriptors, false if the event was cancelled for some suscriptor, true otherwise.\r\n         */\r\n        static trigger(evt: string, ...restParams: any[]): boolean {\r\n            const callbacks = Router._eventHandlers[evt];\r\n            if (!callbacks || !callbacks.length) {\r\n                return null;\r\n            }\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                const respIt = callbacks[i].apply(null, restParams);          \r\n                // check if some listener cancelled the event.\r\n                if (respIt === false) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        private static _applyNested(nodeRoutes: NodeRoute[]): Function {\r\n            return function(param: any) {\r\n                if (typeof param === 'string') {\r\n                    Router.route(param);\r\n                } else if (nodeRoutes && nodeRoutes.length) {\r\n                    Router._apply(nodeRoutes);\r\n                }\r\n            };\r\n        }\r\n\r\n        private static _apply(nodeRoutes: NodeRoute[]) {\r\n            let falseToReject: boolean;\r\n            for (let i = 0; i < nodeRoutes.length; i++) {\r\n                const nodeRoute = nodeRoutes[i];\r\n                if (nodeRoute.rootRerouting) {\r\n                    falseToReject = nodeRoute.callback.call(null, nodeRoute.params);\r\n                }\r\n                Router._applyNested(nodeRoute.routes)(falseToReject);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    Router._listen();\r\n\r\n}"]}