{"version":3,"sources":["prouter.js"],"names":[],"mappings":"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","file":"prouter.js","sourcesContent":["/**\r\n * Unobtrusive, forward-thinking and ultra-lightweight client-side router library.\r\n */\r\nvar prouter;\r\n(function (prouter) {\r\n    var root = window;\r\n    var document = root.document;\r\n    // Cached regular expressions for matching named param parts and splatted\r\n    // parts of route strings.\r\n    var optionalParam = /\\((.*?)\\)/g;\r\n    var namedParam = /(\\(\\?)?:\\w+/g;\r\n    var splatParam = /\\*\\w+/g;\r\n    var escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\r\n    var trueHash = /#(.*)$/;\r\n    var isRoot = /[^\\/]$/;\r\n    // Cached regex for stripping a leading hash/slash and trailing space.\r\n    var routeStripper = /^[#\\/]|\\s+$/g;\r\n    // Cached regex for stripping leading and trailing slashes.\r\n    var rootStripper = /^\\/+|\\/+$/g;\r\n    // Cached regex for removing a trailing slash.\r\n    var trailingSlash = /\\/$/;\r\n    // Cached regex for stripping urls of hash.\r\n    var pathStripper = /#.*$/;\r\n    /**\r\n     * Handles cross-browser history management, based on either\r\n     * [pushState](http://diveintohtml5.info/history.html) and real URLs, or\r\n     * [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\r\n     * and URL fragments.\r\n     * @constructor\r\n     */\r\n    var History = (function () {\r\n        function History() {\r\n            this._location = root.location;\r\n            this._history = root.history;\r\n            this._handlers = [];\r\n            this._evtHandlers = {};\r\n            this._checkUrl = this._checkUrl.bind(this);\r\n        }\r\n        /**\r\n         * Are we at the app root?\r\n         * @returns {boolean} if we are in the root.\r\n         */\r\n        History.prototype.atRoot = function () {\r\n            return this._location.pathname.replace(isRoot, '$&/') === this._root;\r\n        };\r\n        /**\r\n         * Gets the true hash value. Cannot use location.hash directly due to bug\r\n         * in Firefox where location.hash will always be decoded.\r\n         * @returns {string} The hash.\r\n         */\r\n        History.prototype.getHash = function () {\r\n            var match = this._location.href.match(trueHash);\r\n            return match ? match[1] : '';\r\n        };\r\n        /**\r\n         * Get the cross-browser normalized URL fragment, either from the URL,\r\n         * the hash, or the override.\r\n         * @param {string} fragment The url fragment\r\n         * @param {boolean} forcePushState flag to force the usage of pushSate\r\n         * @returns {string} The fragment.\r\n         */\r\n        History.prototype.getFragment = function (fragment, forcePushState) {\r\n            var fragmentAux = fragment;\r\n            if (fragmentAux === undefined || fragmentAux === null) {\r\n                if (this._hasPushState || !this._wantsHashChange || forcePushState) {\r\n                    fragmentAux = root.decodeURI(this._location.pathname + this._location.search);\r\n                    var rootUrl = this._root.replace(trailingSlash, '');\r\n                    if (fragmentAux.lastIndexOf(rootUrl, 0) === 0) {\r\n                        fragmentAux = fragmentAux.slice(rootUrl.length);\r\n                    }\r\n                }\r\n                else {\r\n                    fragmentAux = this.getHash();\r\n                }\r\n            }\r\n            else {\r\n                fragmentAux = root.decodeURI(fragmentAux);\r\n            }\r\n            return fragmentAux.replace(routeStripper, '');\r\n        };\r\n        /**\r\n         * Start the route change handling, returning `true` if the current URL matches\r\n         * an existing route, and `false` otherwise.\r\n         * @param {Object} options Options\r\n         * @returns {boolean} true if the current fragment matched some handler, false otherwise.\r\n         */\r\n        History.prototype.start = function (options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (History._started) {\r\n                throw new Error('Router.history has already been started');\r\n            }\r\n            History._started = true;\r\n            // Figure out the initial configuration. Is pushState desired ... is it available?\r\n            this._root = options.root || '/';\r\n            this._wantsHashChange = options.hashChange !== false;\r\n            this._wantsPushState = !!options.pushState;\r\n            this._hasPushState = !!(options.pushState && this._history && this._history.pushState);\r\n            var fragment = this.getFragment();\r\n            // Normalize root to always include a leading and trailing slash.\r\n            this._root = ('/' + this._root + '/').replace(rootStripper, '/');\r\n            // Depending on whether we're using pushState or hashes, and whether\r\n            // 'onhashchange' is supported, determine how we check the URL state.\r\n            if (this._hasPushState) {\r\n                root.addEventListener('popstate', this._checkUrl);\r\n            }\r\n            else if (this._wantsHashChange && ('onhashchange' in root)) {\r\n                root.addEventListener('hashchange', this._checkUrl);\r\n            }\r\n            // Determine if we need to change the base url, for a pushState link\r\n            // opened by a non-pushState browser.\r\n            this._fragment = fragment;\r\n            // Transition from hashChange to pushState or vice versa if both are\r\n            // requested.\r\n            if (this._wantsHashChange && this._wantsPushState) {\r\n                // If we've started off with a route from a `pushState`-enabled\r\n                // browser, but we're currently in a browser that doesn't support it...\r\n                if (!this._hasPushState && !this.atRoot()) {\r\n                    this._fragment = this.getFragment(null, true);\r\n                    this._location.replace(this._root + '#' + this._fragment);\r\n                    // Return immediately as browser will do redirect to new url\r\n                    return true;\r\n                }\r\n                else if (this._hasPushState && this.atRoot() && this._location.hash) {\r\n                    this._fragment = this.getHash().replace(routeStripper, '');\r\n                    this._history.replaceState({}, document.title, this._root + this._fragment);\r\n                }\r\n            }\r\n            if (options.silent !== true) {\r\n                return this._loadUrl();\r\n            }\r\n            return false;\r\n        };\r\n        /**\r\n         * Disable Router.history, perhaps temporarily. Not useful in a real app,\r\n         * but possibly useful for unit testing Routers.\r\n         */\r\n        History.prototype.stop = function () {\r\n            root.removeEventListener('popstate', this._checkUrl);\r\n            root.removeEventListener('hashchange', this._checkUrl);\r\n            History._started = false;\r\n        };\r\n        /**\r\n         * Add a route to be tested when the fragment changes. Routes added later\r\n         * may override previous routes.\r\n         * @param {RegExp} rRoute The route.\r\n         * @param {Function} callback Method to be executed.\r\n         */\r\n        History.prototype.addHandler = function (rRoute, callback) {\r\n            this._handlers.unshift({ route: rRoute, callback: callback });\r\n        };\r\n        /**\r\n         * Checks the current URL to see if it has changed, and if it has,\r\n         * calls `loadUrl`.\r\n         * @returns {boolean} true if navigated, false otherwise.\r\n         * @private\r\n         */\r\n        History.prototype._checkUrl = function () {\r\n            var fragment = this.getFragment();\r\n            if (fragment === this._fragment) {\r\n                return false;\r\n            }\r\n            this._loadUrl();\r\n        };\r\n        /**\r\n         * Attempt to load the current URL fragment. If a route succeeds with a\r\n         * match, returns `true`. If no defined routes matches the fragment,\r\n         * returns `false`.\r\n         * @param {string} fragment E.g.: 'user/pepito'\r\n         * @param {Object} message E.g.: {msg: 'Password changed', type: 'success'}\r\n         * @returns {boolean} true if the fragment matched some handler, false otherwise.\r\n         * @private\r\n         */\r\n        History.prototype._loadUrl = function (fragment, message) {\r\n            this._fragment = this.getFragment(fragment);\r\n            var n = this._handlers.length;\r\n            for (var i = 0; i < n; i++) {\r\n                var handler = this._handlers[i];\r\n                if (handler.route.test(this._fragment)) {\r\n                    handler.callback(this._fragment, message);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        /**\r\n         * Save a fragment into the hash history, or replace the URL state if the\r\n         * 'replace' option is passed. You are responsible for properly URL-encoding\r\n         * the fragment in advance.\r\n         *\r\n         * The options object can contain `trigger: true` if you wish to have the\r\n         * route callback be fired (not usually desirable), or `replace: true`, if\r\n         * you wish to modify the current URL without adding an entry to the history.\r\n         * @param {string} fragment Fragment to navigate to\r\n         * @param {Object=} message Options object.\r\n         * @param {Object=} options Options object.\r\n         * @returns {boolean} true if the fragment matched some handler, false otherwise.\r\n         */\r\n        History.prototype.navigate = function (fragment, message, options) {\r\n            if (options === void 0) { options = {}; }\r\n            if (!History._started) {\r\n                return false;\r\n            }\r\n            var fragmentAux = this.getFragment(fragment);\r\n            var url = this._root + fragmentAux;\r\n            // Strip the hash for matching.\r\n            fragmentAux = fragmentAux.replace(pathStripper, '');\r\n            if (this._fragment === fragmentAux) {\r\n                return false;\r\n            }\r\n            this._fragment = fragmentAux;\r\n            // Don't include a trailing slash on the root.\r\n            if (fragmentAux === '' && url !== '/') {\r\n                url = url.slice(0, -1);\r\n            }\r\n            // If pushState is available, we use it to set the fragment as a real URL.\r\n            if (this._hasPushState) {\r\n                this._history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\r\n            }\r\n            else if (this._wantsHashChange) {\r\n                this._updateHash(fragmentAux, options.replace);\r\n            }\r\n            else {\r\n                return this._location.assign(url);\r\n            }\r\n            if (options.trigger !== false) {\r\n                return this._loadUrl(fragmentAux, message);\r\n            }\r\n            return false;\r\n        };\r\n        /**\r\n         * Add event listener.\r\n         * @param {string} evt Name of the event.\r\n         * @param {Function} callback Method.\r\n         * @returns {History} this history\r\n         */\r\n        History.prototype.on = function (evt, callback) {\r\n            if (this._evtHandlers[evt] === undefined) {\r\n                this._evtHandlers[evt] = [];\r\n            }\r\n            this._evtHandlers[evt].push(callback);\r\n            return this;\r\n        };\r\n        /**\r\n         * Remove event listener.\r\n         * @param {string} evt Name of the event.\r\n         * @param {Function} callback Method.\r\n         * @returns {History} this history\r\n         */\r\n        History.prototype.off = function (evt, callback) {\r\n            if (this._evtHandlers[evt]) {\r\n                var callbacks = this._evtHandlers[evt];\r\n                var n = callbacks.length;\r\n                for (var i = 0; i < n; i++) {\r\n                    if (callbacks[i] === callback) {\r\n                        callbacks.splice(i, 1);\r\n                        if (callbacks.length === 0) {\r\n                            delete this._evtHandlers[evt];\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Events triggering.\r\n         * @param {string} evt Name of the event being triggered.\r\n         */\r\n        History.prototype.trigger = function (evt) {\r\n            var restParams = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                restParams[_i - 1] = arguments[_i];\r\n            }\r\n            var callbacks = this._evtHandlers[evt];\r\n            if (callbacks === undefined) {\r\n                return;\r\n            }\r\n            var callbacksLength = callbacks.length;\r\n            for (var i = 0; i < callbacksLength; i++) {\r\n                callbacks[i].apply(this, restParams);\r\n            }\r\n        };\r\n        /**\r\n         * Update the hash location, either replacing the current entry, or adding\r\n         * a new one to the browser history.\r\n         * @param {string} fragment URL fragment\r\n         * @param {boolean} replace flag\r\n         * @private\r\n         */\r\n        History.prototype._updateHash = function (fragment, replace) {\r\n            if (replace) {\r\n                var href = this._location.href.replace(/(javascript:|#).*$/, '');\r\n                this._location.replace(href + '#' + fragment);\r\n            }\r\n            else {\r\n                // Some browsers require that `hash` contains a leading #.\r\n                this._location.hash = '#' + fragment;\r\n            }\r\n        };\r\n        // Has the history handling already been started?\r\n        History._started = false;\r\n        return History;\r\n    })();\r\n    prouter.History = History;\r\n    var Router = (function () {\r\n        /**\r\n         * Constructor for the router.\r\n         * Routers map faux-URLs to actions, and fire events when routes are\r\n         * matched. Creating a new one sets its `routes` hash, if not set statically.\r\n         * @param {Object} options options.root is a string indicating the site's context, defaults to '/'.\r\n         * @constructor\r\n         */\r\n        function Router(options) {\r\n            if (options === void 0) { options = {}; }\r\n            this._evtHandlers = {};\r\n            this.trigger = History.prototype.trigger;\r\n            this.on = History.prototype.on;\r\n            this.off = History.prototype.off;\r\n            this._opts = options;\r\n            this._bindHandlers();\r\n        }\r\n        /**\r\n         * Manually bind a single named route to a callback.\r\n         * The route argument may be a routing string or regular expression, each matching capture\r\n         * from the route or regular expression will be passed as an argument to the onCallback.\r\n         * @param {Object} handler The handler entry.\r\n         * @returns {Router} this router\r\n         */\r\n        Router.prototype.addHandler = function (handler) {\r\n            var _this = this;\r\n            var rRoute = Router._routeToRegExp(handler.route);\r\n            Router.history.addHandler(rRoute, function (fragment, message) {\r\n                var params = Router._extractParameters(rRoute, fragment);\r\n                var paramsAux = params.slice(0);\r\n                var evtRoute = {\r\n                    new: { fragment: fragment, params: paramsAux, message: message }\r\n                };\r\n                if (_this._old) {\r\n                    evtRoute.old = { fragment: _this._old.fragment, params: _this._old.params };\r\n                }\r\n                _this.trigger('route:before', evtRoute);\r\n                Router.history.trigger('route:before', _this, evtRoute);\r\n                if (evtRoute.canceled) {\r\n                    return;\r\n                }\r\n                params.push(evtRoute);\r\n                if (_this._old && _this._old.handler.deactivate) {\r\n                    _this._old.handler.deactivate.apply(_this._old.handler);\r\n                }\r\n                handler.activate.apply(handler, params);\r\n                _this.trigger('route:after', evtRoute);\r\n                Router.history.trigger('route:after', _this, evtRoute);\r\n                _this._old = { fragment: fragment, params: paramsAux, handler: handler };\r\n            });\r\n            return this;\r\n        };\r\n        /**\r\n         * Simple proxy to `Router.history` to save a fragment into the history.\r\n         * @param {string} fragment Route to navigate to.\r\n         * @param {Object=} message parameters\r\n         * @param {Object=} options parameters\r\n         * @returns {Router} this router\r\n         */\r\n        Router.prototype.navigate = function (fragment, message, options) {\r\n            Router.history.navigate(fragment, message, options);\r\n            return this;\r\n        };\r\n        /**\r\n         * Bind all defined routes to `Router.history`. We have to reverse the\r\n         * order of the routes here to support behavior where the most general\r\n         * routes can be defined at the bottom of the route map.\r\n         * @private\r\n         */\r\n        Router.prototype._bindHandlers = function () {\r\n            if (!this._opts.map) {\r\n                return;\r\n            }\r\n            var routes = this._opts.map;\r\n            var routesN = routes.length - 1;\r\n            for (var i = routesN; i >= 0; i--) {\r\n                this.addHandler(routes[i]);\r\n            }\r\n        };\r\n        /**\r\n         * Convert a route string into a regular expression, suitable for matching\r\n         * against the current location fragment.\r\n         * @param {string} route The route\r\n         * @returns {RegExp} the obtained regex\r\n         * @private\r\n         */\r\n        Router._routeToRegExp = function (route) {\r\n            var routeAux = route.replace(escapeRegExp, '\\\\$&')\r\n                .replace(optionalParam, '(?:$1)?')\r\n                .replace(namedParam, function (match, optional) {\r\n                return optional ? match : '([^/?]+)';\r\n            })\r\n                .replace(splatParam, '([^?]*?)');\r\n            return new RegExp('^' + routeAux + '(?:\\\\?([\\\\s\\\\S]*))?$');\r\n        };\r\n        /**\r\n         * Given a route, and a URL fragment that it matches, return the array of\r\n         * extracted decoded parameters. Empty or unmatched parameters will be\r\n         * treated as `null` to normalize cross-browser behavior.\r\n         * @param {RegExp} route The alias\r\n         * @param {string} fragment The url part\r\n         * @returns {string[]} the extracted parameters\r\n         * @private\r\n         */\r\n        Router._extractParameters = function (route, fragment) {\r\n            var params = route.exec(fragment).slice(1);\r\n            return params.map(function (param, i) {\r\n                // Don't decode the search params.\r\n                if (i === params.length - 1) {\r\n                    return param;\r\n                }\r\n                return param === undefined ? undefined : decodeURIComponent(param);\r\n            });\r\n        };\r\n        return Router;\r\n    })();\r\n    prouter.Router = Router;\r\n    /**\r\n     * Create the default Router.History.\r\n     * @type {History}\r\n     */\r\n    Router.history = new History();\r\n})(prouter || (prouter = {}));\r\n"],"sourceRoot":"/source/"}