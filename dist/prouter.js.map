{"version":3,"file":"prouter.js","sourceRoot":"/source/","sources":["prouter.ts"],"names":["prouter","prouter.RouteHelper","prouter.RouteHelper.constructor","prouter.RouteHelper._escapeString","prouter.RouteHelper._escapeGroup","prouter.RouteHelper.clearSlashes","prouter.RouteHelper._flags","prouter.RouteHelper._parse","prouter.RouteHelper._tokensToPathExp","prouter.RouteHelper.parseQuery","prouter.RouteHelper.parsePath","prouter.RouteHelper.stringToPathExp","prouter.Router","prouter.Router.constructor","prouter.Router.listen","prouter.Router.stop","prouter.Router.getCurrent","prouter.Router.use","prouter.Router.navigate","prouter.Router._loadCurrent","prouter.Router._load","prouter.Router._extractHandlers","prouter.Router._obtainRequestProcessors","prouter.Router._extractRequest","prouter.RouteGroup","prouter.RouteGroup.constructor","prouter.RouteGroup.use"],"mappings":"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","sourcesContent":["/**\r\n * Unobtrusive, forward-thinking and lightweight JavaScript router library.\r\n */\r\nmodule prouter {\r\n\r\n    /**\r\n     * Contracts for static type checking.\r\n     */\r\n    export interface Options {\r\n        mode?: string;\r\n        root?: string;\r\n        silent?: boolean;\r\n    }\r\n\r\n    export interface Path {\r\n        path: string;\r\n        query: Object;\r\n        queryString: string;\r\n    }\r\n\r\n    export interface PathExp extends RegExp {\r\n        keys?: PathExpToken[];\r\n    }\r\n\r\n    export interface PathExpToken {\r\n        name: string;\r\n        prefix: string;\r\n        delimiter: string;\r\n        optional: boolean;\r\n        repeat: boolean;\r\n        pattern: string;\r\n    }\r\n\r\n    export interface Handler {\r\n        pathExp: PathExp;\r\n        activate: Function;\r\n    }\r\n\r\n    export interface GroupHandler {\r\n        path: any;\r\n        activate: Function;\r\n    }\r\n\r\n    export interface RequestParams {\r\n        [index: string]: string;\r\n    }\r\n\r\n    export interface Request extends Path {\r\n        params?: RequestParams;\r\n        oldPath?: string;\r\n    }\r\n\r\n    export interface RequestProcessor {\r\n        request: Request;\r\n        activate: Function;\r\n    }\r\n\r\n    /** @type {global} Allows to access the global var in the IDE, just for compilation. */\r\n    declare const global: any;\r\n\r\n    /**\r\n     * Stablish the root object, `window` (`self`) in the browser, or `global` on the server.\r\n     * We use `self` instead of `window` for `WebWorker` support.\r\n     * @type {window} the root object\r\n     */\r\n    const _global = (typeof self === 'object' && self.self === self && self) ||\r\n        (typeof global === 'object' && global.global === global && global);\r\n\r\n    /** @type {RegExp} Cached regex for stripping out leading slashes. */\r\n    const LEADING_SLASHES_STRIPPER = /^\\/+|\\/+$/;\r\n\r\n    /** @type {RegExp} Cached regex for default route. */\r\n    const DEF_ROUTE = /.*/;\r\n\r\n    /**\r\n     * The main path matching regexp utility.\r\n     * @type {RegExp} path regexp.\r\n     */\r\n    const PATH_STRIPPER = new RegExp([\r\n    // Match escaped characters that would otherwise appear in future matches.\r\n    // This allows the user to escape special characters that won't transform.\r\n        '(\\\\\\\\.)',\r\n    // Match Express-style parameters and un-named parameters with a prefix\r\n    // and optional suffixes. Matches appear as:\r\n    //\r\n    // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\r\n    // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\r\n    // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\r\n        '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^()])+)\\\\))([+*?])?|(\\\\*))'\r\n    ].join('|'), 'g');\r\n\r\n\r\n    /**\r\n     * Collection of helpers for processing routes.\r\n     */\r\n    class RouteHelper {\r\n\r\n        /**\r\n         * Escape a regular expression string.\r\n         * @param  {String} str the string to scape\r\n         * @return {String} the escaped string\r\n         */\r\n        private static _escapeString(str: string): string {\r\n            return str.replace(/([.+*?=^!:${}()[\\]|\\/])/g, '\\\\$1');\r\n        }\r\n\r\n        /**\r\n         * Escape the capturing group by escaping special characters and meaning.\r\n         * @param  {String} group the group to escape\r\n         * @return {String} escaped group.\r\n         */\r\n        private static _escapeGroup(group: string): string {\r\n            return group.replace(/([=!:$\\/()])/g, '\\\\$1');\r\n        }\r\n\r\n        /**\r\n         * Removes leading slashes from the given string.\r\n         * @param  {string} path the uri fragment.\r\n         * @return {string} string without leading slashes.\r\n         */\r\n        static clearSlashes(path: string): string {\r\n            return path.replace(LEADING_SLASHES_STRIPPER, '');\r\n        }\r\n\r\n        /**\r\n         * Get the flags for a regexp from the options.\r\n         * @param  {Object} opts the options object for building the flags.\r\n         * @return {String} flags.\r\n         */\r\n        private static _flags(opts: Object): string {\r\n            return opts['sensitive'] ? '' : 'i';\r\n        }\r\n\r\n        /**\r\n         * Parse a string for the raw tokens.\r\n         * @param  {String} path the fragment to pase.\r\n         * @return {Array} tokens the extracted tokens.\r\n         */\r\n        private static _parse(path: string): any[] {\r\n\r\n            const tokens: any[] = [];\r\n            let key = 0;\r\n            let index = 0;\r\n            let pathIt = '';\r\n            let res: RegExpExecArray;\r\n\r\n            while ((res = PATH_STRIPPER.exec(path))) {\r\n\r\n                const m = res[0];\r\n                const escaped = res[1];\r\n                const offset = res.index;\r\n\r\n                pathIt += path.slice(index, offset);\r\n                index = offset + m.length;\r\n\r\n                // Ignore already escaped sequences.\r\n                if (escaped) {\r\n                    pathIt += escaped[1];\r\n                    continue;\r\n                }\r\n\r\n                // Push the current path onto the tokens.\r\n                if (pathIt) {\r\n                    tokens.push(pathIt);\r\n                    pathIt = '';\r\n                }\r\n\r\n                const prefix = res[2];\r\n                const name = res[3];\r\n                const capture = res[4];\r\n                const group = res[5];\r\n                const suffix = res[6];\r\n                const asterisk = res[7];\r\n\r\n                const repeat = suffix === '+' || suffix === '*';\r\n                const optional = suffix === '?' || suffix === '*';\r\n                const delimiter = prefix || '/';\r\n                const pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?');\r\n\r\n                tokens.push({\r\n                    name: name || (key++).toString(),\r\n                    prefix: prefix || '',\r\n                    delimiter: delimiter,\r\n                    optional: optional,\r\n                    repeat: repeat,\r\n                    pattern: RouteHelper._escapeGroup(pattern)\r\n                });\r\n            }\r\n\r\n            // Match any characters still remaining.\r\n            if (index < path.length) {\r\n                pathIt += path.substr(index);\r\n            }\r\n\r\n            // If the path exists, push it onto the end.\r\n            if (pathIt) {\r\n                tokens.push(pathIt);\r\n            }\r\n\r\n            return tokens;\r\n        }\r\n\r\n        /**\r\n         * Expose a function for taking tokens and returning a RegExp.\r\n         * @param  {Array} tokens used for create the expression.\r\n         * @param  {Object} [options] configuration.\r\n         * @return {PathExp} the resulting path expression.\r\n         */\r\n        private static _tokensToPathExp(tokens: any[], options: Object = {}): PathExp {\r\n\r\n            const strict = options['strict'];\r\n            const end = options['end'] !== false;\r\n            let route = '';\r\n            const lastToken = tokens[tokens.length - 1];\r\n            const endsWithSlash = typeof lastToken === 'string' && lastToken.length && lastToken.charAt(lastToken.length - 1) === '/';\r\n\r\n            // Iterate over the tokens and create our regexp string.\r\n            for (let i = 0; i < tokens.length; i++) {\r\n\r\n                const token = tokens[i];\r\n\r\n                if (typeof token === 'string') {\r\n                    route += RouteHelper._escapeString(token);\r\n                } else {\r\n\r\n                    const prefix = RouteHelper._escapeString(token.prefix);\r\n                    let capture = token.pattern;\r\n\r\n                    if (token.repeat) {\r\n                        capture += '(?:' + prefix + capture + ')*';\r\n                    }\r\n\r\n                    if (token.optional) {\r\n                        if (prefix) {\r\n                            capture = '(?:' + prefix + '(' + capture + '))?';\r\n                        } else {\r\n                            capture = '(' + capture + ')?';\r\n                        }\r\n                    } else {\r\n                        capture = prefix + '(' + capture + ')';\r\n                    }\r\n\r\n                    route += capture;\r\n                }\r\n            }\r\n\r\n            // In non-strict mode we allow a slash at the end of match. If the path to\r\n            // match already ends with a slash, we remove it for consistency. The slash\r\n            // is valid at the end of a path match, not in the middle. This is important\r\n            // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\r\n            if (!strict) {\r\n                route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\\\/(?=$))?';\r\n            }\r\n\r\n            if (end) {\r\n                route += '$';\r\n            } else {\r\n                // In non-ending mode, we need the capturing groups to match as much as\r\n                // possible by using a positive lookahead to the end or next path segment.\r\n                route += strict && endsWithSlash ? '' : '(?=\\\\/|$)';\r\n            }\r\n\r\n            return new RegExp('^' + route, RouteHelper._flags(options));\r\n        }\r\n\r\n        /**\r\n         * Transform a query-string to an object.\r\n         * @param  {string} search the query string.\r\n         * @return {Object} the resulting object.\r\n         */\r\n        static parseQuery(queryString: string): Object {\r\n            const searchParams = {};\r\n            if (queryString.charAt(0) === '?') {\r\n                queryString = queryString.slice(1);\r\n            }\r\n            const paramsArr = queryString.split('&');\r\n            for (let i = 0; i < paramsArr.length; i++) {\r\n                const pair = paramsArr[i].split('=');\r\n                searchParams[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n            }\r\n            return searchParams;\r\n        }\r\n\r\n        /**\r\n         * Transform a fragment to a Path object.\r\n         * @param  {string} path the fragment to parse.\r\n         * @return {Path} the resulting object.\r\n         */\r\n        static parsePath(path: string): Path {\r\n\r\n            let parser: any;\r\n\r\n            if (typeof _global.URL === 'function') {\r\n                parser = new _global.URL(path, 'http://example.com');\r\n            } else {\r\n                parser = document.createElement('a');\r\n                parser.href = 'http://example.com/' + path;\r\n            }\r\n\r\n            const parsedPath: Path = {\r\n                path: RouteHelper.clearSlashes(parser.pathname),\r\n                query: RouteHelper.parseQuery(parser.search),\r\n                queryString: parser.search\r\n            };\r\n\r\n            return parsedPath;\r\n        }\r\n\r\n        /**\r\n         * Create a path regexp from string input.\r\n         * @param  {String} path the given url fragment.\r\n         * @param  {Object} [options] configuration.\r\n         * @return {PathExp} the resulting path expression.\r\n         */\r\n        static stringToPathExp(path: string, options?: Object): PathExp {\r\n\r\n            const tokens = RouteHelper._parse(path);\r\n\r\n            const pathExp = RouteHelper._tokensToPathExp(tokens, options);\r\n\r\n            pathExp.keys = [];\r\n\r\n            // Attach keys back to the regexp.\r\n            for (let i = 0; i < tokens.length; i++) {\r\n                if (typeof tokens[i] !== 'string') {\r\n                    pathExp.keys.push(tokens[i]);\r\n                }\r\n            }\r\n\r\n            return pathExp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Core component for the routing system.\r\n     */\r\n    export class Router {\r\n\r\n        /** @type {Options} Default options for initializing the router. */\r\n        private static _DEF_OPTIONS: Options = { mode: 'hash', root: '/', silent: false };\r\n        /** @type {Options} Options used when initializing the routing system. */\r\n        private static _options: Options;\r\n        /** @type {string} Current loaded path. */\r\n        private static _loadedPath: string;\r\n        /** @type {Handler[]} Handlers for the routing system. */\r\n        private static _handlers: Handler[] = [];\r\n\r\n        /**\r\n         * Start the routing system, returning `true` if the current URL was loaded,\r\n         * and `false` otherwise.\r\n         * @param {Object} [options] Options\r\n         * @return {boolean} true if the current fragment matched some handler, false otherwise.\r\n         */\r\n        static listen(options: Options): boolean {\r\n\r\n            if (this._options) {\r\n                throw new Error('Router already listening.');\r\n            }\r\n\r\n            this._options = {};\r\n\r\n            for (let prop in Router._DEF_OPTIONS) {\r\n                if (options[prop] !== undefined) {\r\n                    this._options[prop] = options[prop];\r\n                } else if (this._options[prop] === undefined) {\r\n                    this._options[prop] = Router._DEF_OPTIONS[prop];\r\n                }\r\n            }\r\n\r\n            switch (this._options.mode) {\r\n                case 'history':\r\n                    addEventListener('popstate', this._loadCurrent, false);\r\n                    break;\r\n                case 'hash':\r\n                    addEventListener('hashchange', this._loadCurrent, false);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Invalid mode '\" + this._options.mode + \"'. Valid modes are: 'history', 'hash'.\");\r\n            }\r\n\r\n            let loaded = false;\r\n\r\n            if (!this._options.silent) {\r\n                loaded = this._loadCurrent();\r\n            }\r\n\r\n            return loaded;\r\n        }\r\n\r\n        /**\r\n         * Disables the route change handling and reset state, perhaps temporarily.\r\n         * Not useful in a real app but for unit testing.\r\n         * @return {Router} the router.\r\n         */\r\n        static stop(): Router {\r\n            if (this._options.mode === 'history') {\r\n                removeEventListener('popstate', this._loadCurrent, false);\r\n                history.pushState(null, null, this._options.root);\r\n            } else {\r\n                removeEventListener('hashchange', this._loadCurrent, false);\r\n                location.hash = '#';\r\n            }\r\n            this._handlers = [];\r\n            this._loadedPath = null;\r\n            this._options = null;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Retrieves the current path without the root prefix.\r\n         * @return {string} the current path.\r\n         */\r\n        static getCurrent(): string {\r\n\r\n            let path: string;\r\n\r\n            if (this._options.mode === 'history') {\r\n                const decodedUri = decodeURI(location.pathname + location.search);\r\n                path = RouteHelper.clearSlashes(decodedUri);\r\n                path = this._options.root === '/' ? path : path.slice(this._options.root.length);\r\n            } else {\r\n                const match = location.href.match(/#(.*)$/);\r\n                path = match ? match[1] : '';\r\n            }\r\n\r\n            path = RouteHelper.clearSlashes(path);\r\n\r\n            return path;\r\n        }\r\n\r\n        /**\r\n         * Adds the given middleware as a handler for the given path (defaulting to any path).\r\n         * @param {string|Function|RouteGroup} path the fragment or the callback.\r\n         * @param {Function|RouteGroup} [activate] the activate callback or the group of routes.\r\n         * @return {Router} the router.\r\n         */\r\n        static use(path: any, activate?: any): Router {\r\n\r\n            if (activate instanceof RouteGroup || path instanceof RouteGroup) {\r\n                let parentPath: string;\r\n                if (path instanceof RouteGroup) {\r\n                    activate = path;\r\n                } else {\r\n                    parentPath = RouteHelper.clearSlashes(path);\r\n                }\r\n                this._handlers = this._extractHandlers(parentPath, activate);\r\n            } else {\r\n                let pathExp: PathExp;\r\n                // If default route.\r\n                if (typeof path === 'function') {\r\n                    activate = path;\r\n                    pathExp = DEF_ROUTE;\r\n                } else {\r\n                    path = RouteHelper.clearSlashes(path);\r\n                    pathExp = RouteHelper.stringToPathExp(path);\r\n                }\r\n                this._handlers.push({ pathExp, activate });\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Change the current path and load it.\r\n         * @param {string} path The fragment to navigate to\r\n         * @returns {boolean} true if the path matched some handler, false otherwise.\r\n         */\r\n        static navigate(path: string): boolean {\r\n\r\n            if (!this._options) {\r\n                throw new Error(\"It is required to call the 'listen' function before navigating.\");\r\n            }\r\n\r\n            path = RouteHelper.clearSlashes(path);\r\n\r\n            switch (this._options.mode) {\r\n                case 'history':\r\n                    history.pushState(null, null, this._options.root + path);\r\n                    break;\r\n                case 'hash':\r\n                    location.hash = '#' + path;\r\n                    break;\r\n            }\r\n\r\n            return this._load(path);\r\n        }\r\n\r\n        /**\r\n         * Loads the current path if already not loaded.\r\n         * @return {boolean} true if loaded, false otherwise.\r\n         */\r\n        private static _loadCurrent(): boolean {\r\n            const currentPath = this.getCurrent();\r\n            return currentPath === this._loadedPath ? false : this._load(currentPath);\r\n        }\r\n\r\n        /**\r\n         * Attempts to load the given URL fragment. If a route succeeds with a\r\n         * match, returns `true`; if no defined routes matches the fragment,\r\n         * returns `false`.\r\n         * @param {string} path E.g.: 'user/pepito'\r\n         * @returns {boolean} true if the fragment matched some handler, false otherwise.\r\n         */\r\n        private static _load(path: string): boolean {\r\n\r\n            const requestProcessors = this._obtainRequestProcessors(path);\r\n\r\n            let count = 0;\r\n\r\n            for (let i = 0; i < requestProcessors.length; i++) {\r\n                const requestProcessor = requestProcessors[i];\r\n                requestProcessor.request.oldPath = this._loadedPath;\r\n                const next = requestProcessor.activate.call(null, requestProcessor.request);\r\n                if (next === false) {\r\n                    break;\r\n                }\r\n                count++;\r\n            }\r\n\r\n            const navigated = count > 0;\r\n\r\n            this._loadedPath = path;\r\n\r\n            return navigated;\r\n        }\r\n\r\n        /**\r\n         * Extracts the handlers from the given arguments.\r\n         * @param  {string} parentPath The parent path of the group of routes.\r\n         * @param  {RouteGroup} routeGroup The group of routes.\r\n         * @param  {Handler[]=[]} [handlers] The holder for extracted handlers.\r\n         * @return {Handler[]} The extracted handlers.\r\n         */\r\n        private static _extractHandlers(parentPath: string, routeGroup: RouteGroup, handlers: Handler[] = []): Handler[] {\r\n\r\n            const groupHandlers = routeGroup._handlers;\r\n\r\n            for (let i = 0; i < groupHandlers.length; i++) {\r\n\r\n                const itHandler = groupHandlers[i];\r\n                let subPath: string;\r\n                let activate: Function;\r\n\r\n                if (typeof itHandler.path === 'function') {\r\n                    activate = itHandler.path;\r\n                } else {\r\n                    activate = itHandler.activate;\r\n                    subPath = RouteHelper.clearSlashes(itHandler.path);\r\n                }\r\n\r\n                let pathExp: PathExp;\r\n\r\n                if (parentPath === undefined || subPath === undefined) {\r\n                    if (parentPath === undefined && subPath === undefined) {\r\n                        pathExp = DEF_ROUTE;\r\n                    } else if (parentPath === undefined) {\r\n                        pathExp = RouteHelper.stringToPathExp(subPath);\r\n                    } else {\r\n                        pathExp = RouteHelper.stringToPathExp(parentPath);\r\n                    }\r\n                } else {\r\n                    const path = parentPath + '/' + subPath;\r\n                    pathExp = RouteHelper.stringToPathExp(path);\r\n                }\r\n\r\n                handlers.push({ pathExp, activate });\r\n            }\r\n\r\n            return handlers;\r\n        }\r\n\r\n        /**\r\n         * Obtains the request processors for the given path according to the current handlers in the router.\r\n         * @param  {string} path The url fragment to check.\r\n         * @return {RequestProcessor[]} The obtained request processors.\r\n         */\r\n        private static _obtainRequestProcessors(path: string): RequestProcessor[] {\r\n\r\n            const parsedPath = RouteHelper.parsePath(path);\r\n\r\n            const requestProcessors: RequestProcessor[] = [];\r\n\r\n            for (let i = 0; i < this._handlers.length; i++) {\r\n\r\n                const handler = this._handlers[i];\r\n                const match = handler.pathExp.test(parsedPath.path);\r\n\r\n                if (match) {\r\n\r\n                    const request = this._extractRequest(path, handler.pathExp);\r\n\r\n                    const requestProcessor: RequestProcessor = { activate: handler.activate, request };\r\n\r\n                    requestProcessors.push(requestProcessor);\r\n                }\r\n            }\r\n\r\n            return requestProcessors;\r\n        }\r\n\r\n        /**\r\n         * Extracts a request from the given arguments, using decoded parameters.\r\n         * @param {string} path The url fragment.\r\n         * @param {PathExp} [pathExp] The path expression.\r\n         * @returns {Request} The extracted request.\r\n         */\r\n        private static _extractRequest(path: string, pathExp?: PathExp): Request {\r\n\r\n            const request: Request = RouteHelper.parsePath(path);\r\n            request.params = {};\r\n\r\n            const result = pathExp ? pathExp.exec(request.path) : null;\r\n\r\n            if (!result) {\r\n                return request;\r\n            }\r\n\r\n            const args = result.slice(1);\r\n            const keys = pathExp.keys;\r\n\r\n            for (let i = 0; i < args.length; i++) {\r\n                if (args[i] !== undefined) {\r\n                    request.params[keys[i].name] = decodeURIComponent(args[i]);\r\n                }\r\n            }\r\n\r\n            return request;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allows to use a group of routes as middleware.\r\n     */\r\n    export class RouteGroup {\r\n\r\n        /** @type {GroupHandler[]} The list of handlers for this group. */\r\n        _handlers: GroupHandler[] = [];\r\n\r\n        /**\r\n         * Adds the given middleware function as handler for the given path (defaulting to any path).\r\n         * @param {string|Function} path The fragment or the callback.\r\n         * @param {Function} [activate] The activate callback or the group of routes.\r\n         * @return {RouteGroup} The router group.\r\n         */\r\n        use(path: any, activate?: Function): RouteGroup {\r\n            this._handlers.push({ path, activate });\r\n            return this;\r\n        }\r\n    }\r\n\r\n}\r\n"]}