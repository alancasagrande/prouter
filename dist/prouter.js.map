{"version":3,"sources":["prouter.js"],"names":[],"mappings":"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","file":"prouter.js","sourcesContent":["/**\r\n * Unobtrusive, forward-thinking and lightweight JavaScript router library.\r\n */\r\nvar root = typeof window !== 'undefined' ? window : global;\r\n// Cached regular expressions for matching named param parts and splatted\r\n// parts of route strings.\r\nvar optionalParam = /\\((.*?)\\)/g;\r\nvar namedParam = /(\\(\\?)?:\\w+/g;\r\nvar splatParam = /\\*\\w+/g;\r\nvar escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\r\n// Cached regex for stripping a leading hash/slash and trailing space.\r\nvar routeStripper = /^[#\\/]|\\s+$/g;\r\n// Cached regex for stripping leading and trailing slashes.\r\nvar rootStripper = /^\\/+|\\/+$/g;\r\n// Cached regex for stripping urls of hash.\r\nvar pathStripper = /#.*$/;\r\n/**\r\n * Handles cross-browser history management, based on either\r\n * [pushState](http://diveintohtml5.info/history.html) and real URLs, or\r\n * [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\r\n * and URL fragments.\r\n * @constructor\r\n */\r\nvar History = (function () {\r\n    function History() {\r\n        this._location = root.location;\r\n        this._history = root.history;\r\n        this._handlers = [];\r\n        this._evtHandlers = {};\r\n        this._checkUrl = this._checkUrl.bind(this);\r\n    }\r\n    /**\r\n     * Are we at the app root?\r\n     * @returns {boolean} if we are in the root.\r\n     */\r\n    History.prototype.atRoot = function () {\r\n        var path = this._location.pathname.replace(/[^\\/]$/, '$&/');\r\n        return path === this._root && !this.getSearch();\r\n    };\r\n    /**\r\n     * Obtain the search.\r\n     * @returns {string} the search.\r\n     */\r\n    History.prototype.getSearch = function () {\r\n        var match = this._location.href.replace(/#.*/, '').match(/\\?.+/);\r\n        return match ? match[0] : '';\r\n    };\r\n    /**\r\n     * Gets the true hash value. Cannot use location.hash directly due to bug\r\n     * in Firefox where location.hash will always be decoded.\r\n     * @returns {string} The hash.\r\n     */\r\n    History.prototype.getHash = function () {\r\n        var match = this._location.href.match(/#(.*)$/);\r\n        return match ? match[1] : '';\r\n    };\r\n    /**\r\n     *  Get the pathname and search params, without the root.\r\n     *  @returns {string} The path.\r\n     */\r\n    History.prototype.getPath = function () {\r\n        var path = History._decodeFragment(this._location.pathname + this.getSearch()).slice(this._root.length - 1);\r\n        return path.charAt(0) === '/' ? path.slice(1) : path;\r\n    };\r\n    /**\r\n     * Get the cross-browser normalized URL fragment, either from the URL,\r\n     * the hash, or the override.\r\n     * @param {string} fragment The url fragment\r\n     * @returns {string} The fragment.\r\n     */\r\n    History.prototype.getFragment = function (fragment) {\r\n        if (fragment === undefined || fragment === null) {\r\n            if (this._usePushState || !this._wantsHashChange) {\r\n                fragment = this.getPath();\r\n            }\r\n            else {\r\n                fragment = this.getHash();\r\n            }\r\n        }\r\n        return fragment.replace(routeStripper, '');\r\n    };\r\n    /**\r\n     * Start the route change handling, returning `true` if the current URL matches\r\n     * an existing route, and `false` otherwise.\r\n     * @param {Object} options Options\r\n     * @returns {boolean} true if the current fragment matched some handler, false otherwise.\r\n     */\r\n    History.prototype.start = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (History._started) {\r\n            throw new Error('Router.history has already been started');\r\n        }\r\n        History._started = true;\r\n        // Figure out the initial configuration. Is pushState desired ...\r\n        this._root = options.root || '/';\r\n        this._wantsHashChange = options.hashChange !== false;\r\n        this._wantsPushState = !!options.pushState;\r\n        this._hasPushState = !!(this._history && this._history.pushState);\r\n        this._usePushState = this._wantsPushState && this._hasPushState;\r\n        this._fragment = this.getFragment();\r\n        // Normalize root to always include a leading and trailing slash.\r\n        this._root = ('/' + this._root + '/').replace(rootStripper, '/');\r\n        // Transition from hashChange to pushState or vice versa if both are\r\n        // requested.\r\n        if (this._wantsHashChange && this._wantsPushState) {\r\n            var isAtRoot = this.atRoot();\r\n            // If we've started off with a route from a `pushState`-enabled\r\n            // browser, but we're currently in a browser that doesn't support it...\r\n            if (!this._hasPushState && !isAtRoot) {\r\n                var rootAux = this._root.slice(0, -1) || '/';\r\n                this._location.replace(rootAux + '#' + this.getPath());\r\n                // Return immediately as browser will do redirect to new url\r\n                return true;\r\n            }\r\n            else if (this._hasPushState && isAtRoot) {\r\n                this.navigate(this.getHash(), null, { replace: true, trigger: false });\r\n            }\r\n        }\r\n        // Depending on whether we're using pushState or hashes, and whether\r\n        // 'onhashchange' is supported, determine how we check the URL state.\r\n        if (this._usePushState) {\r\n            addEventListener('popstate', this._checkUrl, false);\r\n        }\r\n        else if (this._wantsHashChange) {\r\n            addEventListener('hashchange', this._checkUrl, false);\r\n        }\r\n        if (!options.silent) {\r\n            return this._loadUrl();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Disable Router.history, perhaps temporarily. Not useful in a real app,\r\n     * but possibly useful for unit testing Routers.\r\n     */\r\n    History.prototype.stop = function () {\r\n        root.removeEventListener('popstate', this._checkUrl, false);\r\n        root.removeEventListener('hashchange', this._checkUrl, false);\r\n        History._started = false;\r\n    };\r\n    /**\r\n     * Add a route to be tested when the fragment changes. Routes added later\r\n     * may override previous routes.\r\n     * @param {RegExp} rRoute The route.\r\n     * @param {Function} callback Method to be executed.\r\n     */\r\n    History.prototype.addHandler = function (rRoute, callback) {\r\n        this._handlers.unshift({ route: rRoute, callback: callback });\r\n    };\r\n    /**\r\n     * Save a fragment into the hash history, or replace the URL state if the\r\n     * 'replace' option is passed. You are responsible for properly URL-encoding\r\n     * the fragment in advance.\r\n     *\r\n     * The options object can contain `trigger: true` if you wish to have the\r\n     * route callback be fired (not usually desirable), or `replace: true`, if\r\n     * you wish to modify the current URL without adding an entry to the history.\r\n     * @param {string} fragment Fragment to navigate to\r\n     * @param {Object=} message Options object.\r\n     * @param {Object=} options Options object.\r\n     * @returns {boolean} true if the fragment matched some handler, false otherwise.\r\n     */\r\n    History.prototype.navigate = function (fragment, message, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (!History._started) {\r\n            return false;\r\n        }\r\n        // Normalize the fragment.\r\n        fragment = this.getFragment(fragment);\r\n        // Don't include a trailing slash on the root.\r\n        var rootAux = this._root;\r\n        if (fragment === '' || fragment.charAt(0) === '?') {\r\n            rootAux = rootAux.slice(0, -1) || '/';\r\n        }\r\n        var url = rootAux + fragment;\r\n        // Strip the hash and decode for matching.\r\n        fragment = History._decodeFragment(fragment.replace(pathStripper, ''));\r\n        if (this._fragment === fragment) {\r\n            return false;\r\n        }\r\n        this._fragment = fragment;\r\n        // If pushState is available, we use it to set the fragment as a real URL.\r\n        if (this._usePushState) {\r\n            this._history[options.replace ? 'replaceState' : 'pushState'](null, null, url);\r\n        }\r\n        else if (this._wantsHashChange) {\r\n            this._updateHash(fragment, options.replace);\r\n        }\r\n        else {\r\n            return this._location.assign(url);\r\n        }\r\n        if (options.trigger !== false) {\r\n            return this._loadUrl(fragment, message);\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Add event listener.\r\n     * @param {string} evt Name of the event.\r\n     * @param {Function} callback Method.\r\n     * @returns {History} this history\r\n     */\r\n    History.prototype.on = function (evt, callback) {\r\n        if (this._evtHandlers[evt] === undefined) {\r\n            this._evtHandlers[evt] = [];\r\n        }\r\n        this._evtHandlers[evt].push(callback);\r\n        return this;\r\n    };\r\n    /**\r\n     * Remove event listener.\r\n     * @param {string} evt Name of the event.\r\n     * @param {Function} callback Method.\r\n     * @returns {History} this history\r\n     */\r\n    History.prototype.off = function (evt, callback) {\r\n        if (this._evtHandlers[evt]) {\r\n            var callbacks = this._evtHandlers[evt];\r\n            var n = callbacks.length;\r\n            for (var i = 0; i < n; i++) {\r\n                if (callbacks[i] === callback) {\r\n                    callbacks.splice(i, 1);\r\n                    if (callbacks.length === 0) {\r\n                        delete this._evtHandlers[evt];\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Events triggering.\r\n     * @param {string} evt Name of the event being triggered.\r\n     */\r\n    History.prototype.trigger = function (evt) {\r\n        var restParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            restParams[_i - 1] = arguments[_i];\r\n        }\r\n        var callbacks = this._evtHandlers[evt];\r\n        if (callbacks === undefined) {\r\n            return;\r\n        }\r\n        var callbacksLength = callbacks.length;\r\n        for (var i = 0; i < callbacksLength; i++) {\r\n            callbacks[i].apply(this, restParams);\r\n        }\r\n    };\r\n    /**\r\n     * Checks the current URL to see if it has changed, and if it has,\r\n     * calls `loadUrl`.\r\n     * @returns {boolean} true if navigated, false otherwise.\r\n     * @private\r\n     */\r\n    History.prototype._checkUrl = function () {\r\n        var fragment = this.getFragment();\r\n        if (fragment === this._fragment) {\r\n            return false;\r\n        }\r\n        return this._loadUrl();\r\n    };\r\n    /**\r\n     * Attempt to load the current URL fragment. If a route succeeds with a\r\n     * match, returns `true`. If no defined routes matches the fragment,\r\n     * returns `false`.\r\n     * @param {string} fragment E.g.: 'user/pepito'\r\n     * @param {Object} message E.g.: {msg: 'Password changed', type: 'success'}\r\n     * @returns {boolean} true if the fragment matched some handler, false otherwise.\r\n     * @private\r\n     */\r\n    History.prototype._loadUrl = function (fragment, message) {\r\n        this._fragment = this.getFragment(fragment);\r\n        var n = this._handlers.length;\r\n        for (var i = 0; i < n; i++) {\r\n            var handler = this._handlers[i];\r\n            if (handler.route.test(this._fragment)) {\r\n                handler.callback(this._fragment, message);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Update the hash location, either replacing the current entry, or adding\r\n     * a new one to the browser history.\r\n     * @param {string} fragment URL fragment\r\n     * @param {boolean} replace flag\r\n     * @private\r\n     */\r\n    History.prototype._updateHash = function (fragment, replace) {\r\n        if (replace) {\r\n            var href = this._location.href.replace(/(javascript:|#).*$/, '');\r\n            this._location.replace(href + '#' + fragment);\r\n        }\r\n        else {\r\n            // Some browsers require that `hash` contains a leading #.\r\n            this._location.hash = '#' + fragment;\r\n        }\r\n    };\r\n    /**\r\n     *  Unicode characters in `location.pathname` are percent encoded so they're\r\n     *  decoded for comparison. `%25` should not be decoded since it may be part\r\n     *  of an encoded parameter.\r\n     *  @param {string} fragment The url fragment to decode\r\n     *  @returns {string} the decoded fragment.\r\n     *  @private\r\n     */\r\n    History._decodeFragment = function (fragment) {\r\n        return decodeURI(fragment.replace(/%25/g, '%2525'));\r\n    };\r\n    // Has the history handling already been started?\r\n    History._started = false;\r\n    return History;\r\n})();\r\nexports.History = History;\r\nvar Router = (function () {\r\n    /**\r\n     * Constructor for the router.\r\n     * Routers map faux-URLs to actions, and fire events when routes are\r\n     * matched. Creating a new one sets its `routes` hash, if not set statically.\r\n     * @param {Object} options options.root is a string indicating the site's context, defaults to '/'.\r\n     * @constructor\r\n     */\r\n    function Router(options) {\r\n        if (options === void 0) { options = {}; }\r\n        this._evtHandlers = {};\r\n        // Copy event bus functionality.\r\n        this.trigger = History.prototype.trigger;\r\n        this.on = History.prototype.on;\r\n        this.off = History.prototype.off;\r\n        this._bindHandlers(options.map);\r\n    }\r\n    /**\r\n     * Manually bind a single named route to a callback.\r\n     * The route argument may be a routing string or regular expression, each matching capture\r\n     * from the route or regular expression will be passed as an argument to the onCallback.\r\n     * @param {Object} handler The handler entry.\r\n     * @returns {Router} this router\r\n     */\r\n    Router.prototype.addHandler = function (handler) {\r\n        var _this = this;\r\n        var rRoute = Router._routeToRegExp(handler.route);\r\n        Router.history.addHandler(rRoute, function (fragment, message) {\r\n            var params = Router._extractParameters(rRoute, fragment);\r\n            var paramsAux = params.slice(0);\r\n            var evtRoute = {\r\n                new: { fragment: fragment, params: paramsAux, message: message }\r\n            };\r\n            if (_this._old) {\r\n                evtRoute.old = { fragment: _this._old.fragment, params: _this._old.params };\r\n            }\r\n            _this.trigger('route:before', evtRoute);\r\n            Router.history.trigger('route:before', _this, evtRoute);\r\n            if (evtRoute.canceled) {\r\n                return;\r\n            }\r\n            params.push(evtRoute);\r\n            if (_this._old && _this._old.handler.deactivate) {\r\n                _this._old.handler.deactivate.apply(_this._old.handler);\r\n            }\r\n            handler.activate.apply(handler, params);\r\n            _this.trigger('route:after', evtRoute);\r\n            Router.history.trigger('route:after', _this, evtRoute);\r\n            _this._old = { fragment: fragment, params: paramsAux, handler: handler };\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Simple proxy to `Router.history` to save a fragment into the history.\r\n     * @param {string} fragment Route to navigate to.\r\n     * @param {Object=} message parameters\r\n     * @param {Object=} options parameters\r\n     * @returns {Router} this router\r\n     */\r\n    Router.prototype.navigate = function (fragment, message, options) {\r\n        Router.history.navigate(fragment, message, options);\r\n        return this;\r\n    };\r\n    /**\r\n     * Bind all defined routes to `Router.history`. We have to reverse the\r\n     * order of the routes here to support behavior where the most general\r\n     * routes can be defined at the bottom of the route map.\r\n     * @param {string} routes list of routes.\r\n     * @private\r\n     */\r\n    Router.prototype._bindHandlers = function (routes) {\r\n        if (!routes) {\r\n            return;\r\n        }\r\n        var routesN = routes.length - 1;\r\n        for (var i = routesN; i >= 0; i--) {\r\n            this.addHandler(routes[i]);\r\n        }\r\n    };\r\n    /**\r\n     * Convert a route string into a regular expression, suitable for matching\r\n     * against the current location fragment.\r\n     * @param {string} route The route\r\n     * @returns {RegExp} the obtained regex\r\n     * @private\r\n     */\r\n    Router._routeToRegExp = function (route) {\r\n        var routeAux = route.replace(escapeRegExp, '\\\\$&')\r\n            .replace(optionalParam, '(?:$1)?')\r\n            .replace(namedParam, function (match, optional) {\r\n            return optional ? match : '([^/?]+)';\r\n        })\r\n            .replace(splatParam, '([^?]*?)');\r\n        return new RegExp('^' + routeAux + '(?:\\\\?([\\\\s\\\\S]*))?$');\r\n    };\r\n    /**\r\n     * Given a route, and a URL fragment that it matches, return the array of\r\n     * extracted decoded parameters. Empty or unmatched parameters will be\r\n     * treated as `null` to normalize cross-browser behavior.\r\n     * @param {RegExp} route The alias\r\n     * @param {string} fragment The url part\r\n     * @returns {string[]} the extracted parameters\r\n     * @private\r\n     */\r\n    Router._extractParameters = function (route, fragment) {\r\n        var params = route.exec(fragment).slice(1);\r\n        return params.map(function (param, i) {\r\n            // Don't decode the search params.\r\n            if (i === params.length - 1) {\r\n                return param;\r\n            }\r\n            return param === undefined ? undefined : decodeURIComponent(param);\r\n        });\r\n    };\r\n    return Router;\r\n})();\r\nexports.Router = Router;\r\n/**\r\n * Create the default Router.History.\r\n * @type {History}\r\n */\r\nRouter.history = new History();\r\n"],"sourceRoot":"/source/"}